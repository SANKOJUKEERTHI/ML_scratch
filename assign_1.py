# -*- coding: utf-8 -*-
"""Assign_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ef_75weHls2vaU06HT3MXBoOhtqxe6Pk
"""

# Sankoju Keerthi
# 21GG10032

#imporing all the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

""" <h3> 1) Load the given dataset into a pandas dataframe. Then, display the first eight
rows to get an overview of the data.</h3>
"""

# reading the dataset from the google drive
# using df.head() to display first eight rows of the data
df = pd.read_csv('/content/drive/MyDrive/ML_LAB_ASSIGNMENTS/sales_data.csv')
df.head(8)

group_data = df.isnull().sum()
print(group_data)

"""<h3>2) Tabulate missing values for each group (product, quantity, price, etc). Next,
handle them by replacing them with the mean value of the respective group.</h3>
"""

# using df.isnull() to count null values in each column of the data
df.fillna(df.mean(),inplace=True)

"""<h3> 3) With the results of Experiment 2, create a line plot to visualize the revenue trend
over date </h3>
"""

# Calculating revenue generated for each order. Revenue for each order is equal to price*quantity of the product
df['Revenue'] = df['Quantity']*df['Price']

# ploting the revenue trend over date
# using the matplotlib library ploting a line plot
# using gcf().autofmt_xdate for neat represenation on the x-axis
plt.figure(figsize=(10, 6))
plt.plot(df['Date'], df['Revenue'], marker='o', linestyle='-', color='black')
plt.title('Revenue trend over date')
plt.xlabel('Date')
plt.ylabel('Revenue')
plt.legend(['Revenue Trend'])
plt.gcf().autofmt_xdate()
plt.grid(True)

"""<h3> 4) Calculate and print the total number of Orders in the dataset and the total
revenue generated from the sales. </h3>
"""

# using the functions of pandas to get the count of orders and total revenue. Total revenue is the sum of revenue generated on all orders,
print(df['OrderID'].count())
print(df['Revenue'].sum())

"""<h3> 5)  Calculate and print the average price of each product. Create a bar plot to
visualize the average price of the product. Then identify and print the top most sold products. </h3>
"""

# using groupby function of pandas to group the data according to the product and taking the mean price of the product
averagePrice = df.groupby('Product')['Price'].mean()
averagePrice

# plotting the above calculated data in a bar chart
averagePrice.plot(kind='bar')
plt.title('Mean Prices for Each Product')
plt.xlabel('Product')
plt.ylabel('Mean Price')

# grouping the data based on quatity to find the top most sold product - more number of a particular product sold
product_count = df.groupby('Product')['Quantity'].sum()
product_count

# printing the top most sold product
top_product = product_count.nlargest(1)
print("top selling product : ",top_product)

